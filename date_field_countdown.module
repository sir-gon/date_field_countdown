<?php

/**
 * Define visibility constants
 */
define ('FIELD_COUNTDOWN_SHOW_NEVER', 0);
define ('FIELD_COUNTDOWN_SHOW_ALWAYS', 1);
define ('FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE', 2);
define ('FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST', 3);

/**
 * Implements hook_libraries_info().
 */

function date_field_countdown_libraries_info() {

  $libraries['countdown'] = array(
    'name' => 'countdown',
    'vendor url' => 'http://tutorialzine.com/2011/12/countdown-jquery/',
    'download url' => 'http://tutorialzine.com/2011/12/countdown-jquery/',
      'version arguments' => array(
      'file' => 'jquery.countdown.js',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@', 
      'lines' => 7,
      'cols' => 30,
    ),
    'files' => array(
      'js' => array(
        'jquery.countdown.js'
      ),
      'css' => array(
        'jquery.countdown.css'
      )
    ),
  );

  return $libraries;
}

/**
* Implements hook_theme().
*/
function date_field_countdown_theme() {
  
  $library = libraries_load('countdown');

  return array(
    'date_field_cowntdown' => array(
      'template' => 'date_field_cowntdown',
      'variables' => array(
        // values
        'timestamp' => NULL,
        'formatted_date' => NULL,
        // settings
        'show_countdown' => NULL,
        'show_date' => NULL,
        'note' => NULL
      ),
    ),
  );
}

/**
* Implements hook_field_formatter_info().
*/
function date_field_countdown_field_formatter_info() {
  $info = array(
    'countdown' => array(
      'label' => t('Countdown'), 
      'field types' => array('date', 'datestamp', 'datetime'),
      'description' => t(''),
      // Default settings
      'settings'  => array(
        // Common
        'common' => array(
          'date_type' => 'long',
          'show_countdown' => FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE,
          'show_date' => FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST
        ),
        // Future
        'future' => array(
          'time_left_message' => t('@days days, @hours hours, @minutes minutes, @seconds seconds left!')
        ),
        // Past
        'past' => array(
          'time_out_message' => t('it\'s time!')
        )
      ),
    ), 
  );
  return $info;
 }

/**
* Implements hook_field_formatter_view().
*/
function date_field_countdown_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];
  $now = time();
  $element = array();
  
  switch ($display['type']) {
    case 'countdown':

      foreach ($items as $delta => $item) {

        $element[$delta] = array(
          '#theme' => 'date_field_cowntdown', 
          '#timestamp' => $item['value'] * 1000,
          '#note' => $settings['past']['time_out_message'],
          
        );

        if($settings['common']['show_countdown'] == FIELD_COUNTDOWN_SHOW_NEVER)
        {
          $element[$delta]['#show_countdown'] = FIELD_COUNTDOWN_SHOW_NEVER;
        }
        else
        if($settings['common']['show_countdown'] == FIELD_COUNTDOWN_SHOW_ALWAYS)
        {
          $element[$delta]['#show_countdown'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        }
        else
        if($settings['common']['show_countdown'] == FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST && ($now > $item['value']))
        {
          $element[$delta]['#show_countdown'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        }
        else
        if($settings['common']['show_countdown'] == FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE && ($now < $item['value']))
        {
          $element[$delta]['#show_countdown'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        } else {
          $element[$delta]['#show_countdown'] = FIELD_COUNTDOWN_SHOW_NEVER;
        }


        if($settings['common']['show_date'] == FIELD_COUNTDOWN_SHOW_NEVER)
        {
          $element[$delta]['#show_date'] = FIELD_COUNTDOWN_SHOW_NEVER;
        }
        else
        if($settings['common']['show_date'] == FIELD_COUNTDOWN_SHOW_ALWAYS)
        {
          $element[$delta]['#show_date'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        }
        else
        if($settings['common']['show_date'] == FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST && ($now > $item['value']))
        {
          $element[$delta]['#show_date'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        }
        else
        if($settings['common']['show_date'] == FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE && ($now < $item['value']))
        {
          $element[$delta]['#show_date'] = FIELD_COUNTDOWN_SHOW_ALWAYS;
        }

        if(($now < $item['value']))
        {
          $element[$delta]['#note'] = $settings['future']['time_left_message'];
        }
        else
        if(($now > $item['value'])){
          $element[$delta]['#note'] = $settings['past']['time_out_message'];
        }

        switch($item['date_type']) {

          case 'datestamp':

            $element[$delta]['#timestamp'] = $item['value'] * 1000;
            $element[$delta]['#formatted_date'] = format_date((int) $item['value'], $settings['common']['date_type'], '', $item['timezone']);

          break;
          case 'date': // ISO DATE

            $d1=new DateTime($item['value']);
            
            $element[$delta]['#timestamp'] = (int) $d1->getTimestamp();
            $element[$delta]['#formatted_date'] = format_date($element[$delta]['#timestamp'], $settings['common']['date_type'], '', $item['timezone']);

            $element[$delta]['#timestamp'] *= 1000;


          break;
          case 'datetime': // Reverse date time

            $d1=new DateTime($item['value']);

            $element[$delta]['#timestamp'] = (int) $d1->getTimestamp();

            $element[$delta]['#formatted_date'] = format_date($element[$delta]['#timestamp'], $settings['common']['date_type'], '', $item['timezone']);

            $element[$delta]['#timestamp'] *= 1000;

          break;
        }

      }
    break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function date_field_countdown_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  // Get display mode
  $display = $instance['display'][$view_mode];

  // Get field settings
  $settings = $display['settings'];

  // Get list of date format types.
  $types = system_get_date_types();

  // Build form
  $form = array();

  // Common
  $form['common'] = array(
    '#type' => 'fieldset',
    '#title' => t('Common'),
  );

  $form['common']['show_countdown'] = array(
    '#type'           => 'select',          
    '#title'          => t('Show Countdown'),
    '#description'    => t('Show or hide countdown when date/time is in the past'),
    '#options' =>
      array( 
        FIELD_COUNTDOWN_SHOW_NEVER => t('Never'),
        FIELD_COUNTDOWN_SHOW_ALWAYS => t('Always'),
        FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE => t('Show only if value is in the future'),
        FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST => t('Show only if value is in the past')
      ),
    '#default_value'  => $settings['common']['show_countdown'],
  );

  $form['common']['show_date'] = array(
    '#type'           => 'select',
    '#title'          => t('Show Date/Time'),
    '#description'    => t('Show formatted date/time when value is in the future'),
    '#options' =>
      array( 
        FIELD_COUNTDOWN_SHOW_NEVER => t('Never'),
        FIELD_COUNTDOWN_SHOW_ALWAYS => t('Always'),
        FIELD_COUNTDOWN_SHOW_IF_IN_THE_FUTURE => t('Show only if value is in the future'),
        FIELD_COUNTDOWN_SHOW_IF_IN_THE_PAST => t('Show only if value is in the past')
      ),
    '#default_value'  => $settings['common']['show_date'],
  );

  $form['common']['date_type'] = array(
    '#type'           => 'select',                        
    '#title'          => t('Date Type'),
    '#description'    => t('Select date type to show, if you want to show the date. You can configure date types <a href="@url">here</a>', array('@url' => url('admin/config/regional/date-time'))),
    '#options' => array( ),
    '#default_value'  => $settings['common']['date_type'],
  );

  foreach ($types as $type => $type_values) {
    $form['common']['date_type']['#options'][$type] = $type_values['title'];
  }

  // Future
  $form['future'] = array(
    '#type' => 'fieldset',
    '#title' => t('Future'),
  );

  $form['future']['time_left_message'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Time left message'),
    '#description'    => t('Message to display when the date is in the future. You can use tokens like: @days, @hours, @minutes, @seconds'),
    '#default_value'  => $settings['future']['time_left_message'],
  );

  // Past
  $form['past'] = array(
    '#type' => 'fieldset',
    '#title' => t('Past'),
  );

  $form['past']['time_out_message'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Time out message'),
    '#description'    => t('Message to display when the date/time is in the past'),
    '#default_value'  => $settings['past']['time_out_message'],
  );



  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary
 */
function date_field_countdown_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  $summary .= t('<b>Time out message</b>: "@message"', array(
    '@message'  => isset($settings['past']['time_out_message']) ? $settings['past']['time_out_message'] : ''
    ));

  $summary .= '<br>';

  $summary .= t('<b>Time left message</b>: "@message"', array(
    '@message'  => isset($settings['future']['time_left_message']) ? $settings['future']['time_left_message'] : ''
    ));

  $summary .= '<br>';

  $summary .= t('<b>Date Type </b>: "@message"', array(
    '@message'  => isset($settings['common']['date_type']) ? $settings['common']['date_type'] : ''
    ));
  return $summary;
}

